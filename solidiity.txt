pragma solidity >=0.5.0 <0.6.0;

contract HelloWorld {

}

uint, int, string
+, -, /, *, power: **, %

unit[n] arrName;
uint[] dynamicArr;

function fName( uint memory _argName, uint _argName2) public/private/internal/external returns (string memory){

}

public: anyone
private: perticular contract only
internal: private+inherit contracts too
external: ONLY outside of contract

struct sName{
    uint varN;
    string varN2;
}
sName[] public structsName;
structsName.push();

event eName(uint x, uint y, uint result);
emit eName(_x, _y, result);

keccak256(abi.encodePacked(_str));???
////////

mapping (keydatatype => valuedatatype) mapName;
mapName[key] = value;
value = mapName[key];

msg.sender, gives address of th person/account who called the function

require, function will throw an error and stop executing if some condition is not true:
require(condition);

inheritance
contract subcontractName is parentcontractName{
}

importing
import "filepath.sol";

Storage: stored permanently on the blockchain
Memory: temporary, erased b/w external function calls